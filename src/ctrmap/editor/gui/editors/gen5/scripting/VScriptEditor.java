/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ctrmap.editor.gui.editors.gen5.scripting;

import ctrmap.beaterscript.Assembler;
import ctrmap.editor.CTRMap;
import ctrmap.editor.gui.editors.common.AbstractTabbedEditor;
import ctrmap.editor.gui.editors.gen5.scripting.VProjectSetupParams.ScriptProjectParams;
import ctrmap.editor.system.script.ScriptOpenMode;
import ctrmap.editor.system.workspace.CTRMapProject;
import ctrmap.editor.system.workspace.UserData;
import ctrmap.formats.common.GameInfo;
import ctrmap.formats.common.GameInfoListener;
import ctrmap.missioncontrol_base.debug.IMCDebugger;
import ctrmap.missioncontrol_ntr.fs.NARCRef;
import ctrmap.pokescript.ide.PSIDE;
import ctrmap.pokescript.ide.system.IDEResourceReference;
import ctrmap.pokescript.ide.system.ResourcePathType;
import ctrmap.pokescript.ide.system.project.IDEProject;
import ctrmap.missioncontrol_ntr.fs.NTRGameFS;
import ctrmap.pokescript.LangConstants;
import ctrmap.pokescript.ide.system.project.IDEFile;
import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import ctrmap.pokescript.ide.system.project.include.Dependency;
import ctrmap.pokescript.ide.system.project.include.DependencyType;
import ctrmap.scriptformats.gen5.VScriptFile;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import xstandard.fs.FSFile;
import xstandard.fs.accessors.DiskFile;

public class VScriptEditor extends javax.swing.JPanel implements AbstractTabbedEditor {
    private CTRMap cm;
    private PSIDE ide;
    private IDEProject ideProject;
    private ScriptProjectParams setupParams;
    
    public VScriptEditor(CTRMap cm) {
        initComponents();
        this.cm = cm;
        this.ide = new PSIDE();
        this.ide.initContext();
        this.idePanel.add(this.ide.getContentPane(), BorderLayout.CENTER);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        openScrIDEWarning6 = new javax.swing.JLabel();
        scriptPnl6 = new javax.swing.JPanel();
        btnOpenScrInIDE6 = new javax.swing.JButton();
        btnOpenScrInIDE7 = new javax.swing.JButton();
        scriptIdxSpinner = new javax.swing.JSpinner();
        idePanel = new javax.swing.JPanel();

        openScrIDEWarning6.setForeground(new java.awt.Color(255, 0, 0));
        openScrIDEWarning6.setText("Warning: This can permanently destroy non-user-coded scripts. Proceed with caution.");

        scriptPnl6.setBorder(javax.swing.BorderFactory.createTitledBorder("Scripts"));

        btnOpenScrInIDE6.setText("Open Script");
        btnOpenScrInIDE6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenScrInIDE6ActionPerformed(evt);
            }
        });

        btnOpenScrInIDE7.setText("Save Script");
        btnOpenScrInIDE7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenScrInIDE7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout scriptPnl6Layout = new javax.swing.GroupLayout(scriptPnl6);
        scriptPnl6.setLayout(scriptPnl6Layout);
        scriptPnl6Layout.setHorizontalGroup(
            scriptPnl6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scriptPnl6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scriptIdxSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnOpenScrInIDE6, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnOpenScrInIDE7, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(600, Short.MAX_VALUE))
        );
        scriptPnl6Layout.setVerticalGroup(
            scriptPnl6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, scriptPnl6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(scriptPnl6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOpenScrInIDE6)
                    .addComponent(btnOpenScrInIDE7)
                    .addComponent(scriptIdxSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        idePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        idePanel.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scriptPnl6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(idePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scriptPnl6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(idePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 483, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnOpenScrInIDE6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenScrInIDE6ActionPerformed
        ScriptOpenMode mode = this.getScriptOpenMode();
        if (mode == ScriptOpenMode.NONE) {
            return;
        }
        
        this.openScript((int) this.scriptIdxSpinner.getValue(), this.getSelectedPlugins(), mode);
    }//GEN-LAST:event_btnOpenScrInIDE6ActionPerformed

    private void btnOpenScrInIDE7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenScrInIDE7ActionPerformed

        for (FSFile f : this.ide.getOpenedFiles()) {
            try {
                FSFile output = new DiskFile("C:\\Users\\L33TG\\Documents\\CTRMapVEx\\assemble2.bin"); 
                Assembler.Assemble(f, output, this.cm.ideHelper.getCommandDBByOvlNo(-1));
            } catch (IOException ex) {
                Logger.getLogger(VScriptEditor.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnOpenScrInIDE7ActionPerformed

    @Override
    public String getTabName() {
        return "Script Editor";
    }

    @Override
    public boolean isGameSupported(GameInfo game) {
        return AbstractTabbedEditor.super.isGameSupported(game); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/OverriddenMethodBody
    }

    @Override
    public boolean isDebugOnly() {
        return AbstractTabbedEditor.super.isDebugOnly(); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/OverriddenMethodBody
    }

    @Override
    public boolean isSharedInstance() {
        return AbstractTabbedEditor.super.isSharedInstance(); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/OverriddenMethodBody
    }

    @Override
    public List<GameInfoListener> getGameInfoListeners() {
        return AbstractTabbedEditor.super.getGameInfoListeners(); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/OverriddenMethodBody
    }

    @Override
    public Collection<? extends IMCDebugger> getExtraDebuggers() {
        return AbstractTabbedEditor.super.getExtraDebuggers(); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/OverriddenMethodBody
    }

    @Override
    public void prepareForSave() {
        AbstractTabbedEditor.super.prepareForSave(); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/OverriddenMethodBody
    }

    @Override
    public boolean store(boolean dialog) {
        return AbstractTabbedEditor.super.store(dialog); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/OverriddenMethodBody
    }

    @Override
    public void handleGlobalEvent(String eventId, Object... params) {
        AbstractTabbedEditor.super.handleGlobalEvent(eventId, params); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/OverriddenMethodBody
    }

    @Override
    public void onProjectLoaded(CTRMapProject proj) {
        this.setupParams = new VProjectSetupParams.ScriptProjectParams(this.cm, this.cm.getGame());
        this.cm.ideHelper.setIDE(this.ide);
        this.ideProject = this.cm.ideHelper.getOrCreateProject(this.setupParams);
        this.ide.openProject(this.ideProject);
        
        Dependency dep = new Dependency(DependencyType.DIRECTORY);
        dep.ref = new IDEResourceReference(ResourcePathType.ON_DISK, cm.getProject().userData.getUserDataDir(UserData.UsrDirectory.SCRIPT_INCLUDE).getPath());
        this.ideProject.addDependency(this.ide.context, dep);
    }

    @Override
    public void onProjectUnloaded(CTRMapProject proj) {
        AbstractTabbedEditor.super.onProjectUnloaded(proj); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/OverriddenMethodBody
    }
    
    NTRGameFS FS() {
        return this.cm.getMissionControl(ctrmap.missioncontrol_ntr.VLaunchpad.class).fs;
    }
    
    public void openScript(int Index, int[] overlayIds, ScriptOpenMode Mode) {
        if (Index < 0 || Index > FS().NARCGetDataMax(NARCRef.FIELD_SCRIPTS)) {
            return;
        }
        
        VScriptFile script = new VScriptFile(FS().NARCGet(NARCRef.FIELD_SCRIPTS, Index));
        this.setupParams.setScript(script, Index, overlayIds, Mode);
        String extension;
        if (Mode == ScriptOpenMode.DECOMPILE) {  
            extension = LangConstants.LANG_SOURCE_FILE_EXTENSION;
        } else {  
            extension = LangConstants.LANG_RAW_FILE_EXTENSION;
        }
        
        IDEFile f = this.cm.ideHelper.getScriptByProject(this.setupParams, ideProject, String.format( "%s%s", this.setupParams.getMainClassName(), extension));
        ide.resyncProject(this.ideProject);
        ide.openFile(f);
        ide.makeTree();
        ide.syncOpenedFilesWithSaveData();
        
    }
    
    private ScriptOpenMode getScriptOpenMode() {
        String[] options = {
            "Decompile", 
            "Disassemble"
        };

        int choice = JOptionPane.showOptionDialog(
                null,
                "Choose an option for this script.\nIf this is a zone script container, it is strongly recommended to choose \"Decompile\".\nIf this is a global script container, or you want more granular control/are experienced, choose \"Disassemble\".",
                String.format("Open Script %d", this.scriptIdxSpinner.getValue()),
                JOptionPane.DEFAULT_OPTION,
                JOptionPane.WARNING_MESSAGE,
                null,
                options,
                options[0]
        );
           
        if (choice == JOptionPane.CLOSED_OPTION) {
            return ScriptOpenMode.NONE;
        }
        
        if (choice == 0) {
            return ScriptOpenMode.DECOMPILE;
        }
        
        return ScriptOpenMode.DISASSEMBLE;
    }

    private int[] getSelectedPlugins() {
        JPanel panel = new JPanel(new GridLayout(0, 1));
        panel.add(new JLabel("Which script plugins do you want to use?"));
        ArrayList<Integer> pluginIndices = this.cm.ideHelper.getCommandDBIndices();
        
        List<JCheckBox> checkBoxes = new ArrayList<>();
        for (int pluginIndex : pluginIndices) {
            JCheckBox box;
            if (pluginIndex < 0) {
                box = new JCheckBox("Base");
                box.setSelected(true);
                box.setEnabled(false);
            } else {
                box = new JCheckBox(String.format("Overlay %d", pluginIndex));
            }
            checkBoxes.add(box);
            panel.add(box);
        }

        int result = JOptionPane.showConfirmDialog(
                null,
                panel,
                "Plugin Selection",
                JOptionPane.OK_CANCEL_OPTION,
                JOptionPane.PLAIN_MESSAGE
        );

        if (result == JOptionPane.OK_OPTION) {
            List<Integer> plugins = new ArrayList<>();
            for (int boxIndex = 0; boxIndex < checkBoxes.size(); ++boxIndex) {
                if (checkBoxes.get(boxIndex).isSelected()) {
                    plugins.add(pluginIndices.get(boxIndex));
                }
            }
            return pluginIndices.stream().mapToInt(Integer::intValue).toArray();
        } 
        return new int[] {};
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOpenScrInIDE6;
    private javax.swing.JButton btnOpenScrInIDE7;
    private javax.swing.JPanel idePanel;
    private javax.swing.JLabel openScrIDEWarning6;
    private javax.swing.JSpinner scriptIdxSpinner;
    private javax.swing.JPanel scriptPnl6;
    // End of variables declaration//GEN-END:variables
}
