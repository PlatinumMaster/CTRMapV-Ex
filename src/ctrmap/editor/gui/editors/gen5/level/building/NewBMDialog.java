package ctrmap.editor.gui.editors.gen5.level.building;

import ctrmap.creativestudio.ngcs.io.CSG3DIOContentType;
import ctrmap.creativestudio.ngcs.io.G3DIO;
import ctrmap.creativestudio.ngcs.rtldr.NGCSIOManager;
import ctrmap.formats.generic.collada.DAE;
import ctrmap.formats.generic.source.SMD;
import ctrmap.formats.generic.xobj.OBJFile;
import ctrmap.formats.pokemon.gen5.buildings.AreaBuildingResource;
import ctrmap.formats.pokemon.gen5.buildings.AreaBuildings;
import ctrmap.renderer.scene.model.Model;
import ctrmap.renderer.scenegraph.G3DResource;
import ctrmap.renderer.util.MaterialProcessor;
import xstandard.fs.FSFile;
import xstandard.gui.DialogUtils;
import xstandard.gui.file.XFileDialog;
import java.awt.Color;

public class NewBMDialog extends javax.swing.JDialog {

	private AreaBuildings ab;
	private G3DResource bmTex;

	private Model model;
	private G3DResource importTextures = new G3DResource();
	
	private AreaBuildingResource result;

	public NewBMDialog(AreaBuildings ab, G3DResource bmTex, java.awt.Frame parent, boolean modal) {
		super(parent, modal);
		initComponents();
		this.ab = ab;
		this.bmTex = bmTex;
		bmImportUID.addChangeListener((e) -> {
			updateUIDUI();
		});
		setLocationRelativeTo(parent);
		for (int i = 0; i < 65536; i++) {
			if (ab.getResourceByUniqueID(i) == null) {
				bmImportUID.setValue(i);
				break;
			}
		}
		updateUIDUI();
	}
	
	public AreaBuildingResource getResult() {
		return result;
	}

	private void loadModel(G3DResource rsc) {
		if (!rsc.models.isEmpty()) {
			model = rsc.models.get(0);
			MaterialProcessor.limitTextureNames(16, model.materials, rsc.textures);
			importTextures = rsc;
			mdlNameLabel.setText(model.name);
			modelPreview.loadResource(rsc);
			updateUIDUI();
		}
	}

	private void updateUIDUI() {
		int nowUID = (Integer) bmImportUID.getValue();
		if (ab.getResourceByUniqueID(nowUID) != null) {
			uidInfoMsg.setForeground(Color.RED);
			uidInfoMsg.setText("UID already present.");
			btnDoImport.setEnabled(false);
		} else {
			uidInfoMsg.setForeground(Color.GREEN);
			uidInfoMsg.setText("OK");
			btnDoImport.setEnabled(model != null);
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        headingText = new javax.swing.JLabel();
        headerSeparator = new javax.swing.JSeparator();
        modelPreview = new ctrmap.editor.gui.editors.common.components.Custom3DPreview();
        mdlNameLabel = new javax.swing.JLabel();
        btnImportMdl = new javax.swing.JButton();
        previewSeparator = new javax.swing.JSeparator();
        importAsLabel = new javax.swing.JLabel();
        bmImportUIDLabel = new javax.swing.JLabel();
        bmImportUID = new javax.swing.JSpinner();
        footerSeparator = new javax.swing.JSeparator();
        btnDoImport = new javax.swing.JButton();
        uidInfoMsg = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Add a static prop resource");

        headingText.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        headingText.setText("Add a static prop resource");

        javax.swing.GroupLayout modelPreviewLayout = new javax.swing.GroupLayout(modelPreview);
        modelPreview.setLayout(modelPreviewLayout);
        modelPreviewLayout.setHorizontalGroup(
            modelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        modelPreviewLayout.setVerticalGroup(
            modelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 216, Short.MAX_VALUE)
        );

        mdlNameLabel.setText("- No model loaded -");

        btnImportMdl.setText("Select 3D model");
        btnImportMdl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportMdlActionPerformed(evt);
            }
        });

        importAsLabel.setText("Import as...");

        bmImportUIDLabel.setText("UID:");

        bmImportUID.setModel(new javax.swing.SpinnerNumberModel(0, 0, 65535, 1));

        btnDoImport.setText("Import");
        btnDoImport.setEnabled(false);
        btnDoImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDoImportActionPerformed(evt);
            }
        });

        uidInfoMsg.setText("<N/A>");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(headerSeparator)
            .addComponent(previewSeparator)
            .addComponent(footerSeparator)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(bmImportUIDLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bmImportUID, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(uidInfoMsg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(modelPreview, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(mdlNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnImportMdl))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(headingText)
                            .addComponent(importAsLabel))
                        .addGap(0, 173, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnDoImport)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(headingText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(headerSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(modelPreview, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mdlNameLabel)
                    .addComponent(btnImportMdl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(previewSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(importAsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bmImportUIDLabel)
                    .addComponent(bmImportUID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(uidInfoMsg))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(footerSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDoImport)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnImportMdlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportMdlActionPerformed
		FSFile modelFile = XFileDialog.openFileDialog(DAE.EXTENSION_FILTER, SMD.EXTENSION_FILTER, OBJFile.EXTENSION_FILTER);

		if (modelFile != null) {
			G3DResource rsc = G3DIO.readFile(modelFile, null, NGCSIOManager.getInstance().getFormatHandlers(CSG3DIOContentType.MODEL));
			loadModel(rsc);
		}
    }//GEN-LAST:event_btnImportMdlActionPerformed

    private void btnDoImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDoImportActionPerformed
		if (model != null) {
			AreaBuildingResource rsc = new AreaBuildingResource((Integer) bmImportUID.getValue());
			rsc.addModel(model);

			try {
				G3DResource res = new G3DResource(model);
				res.merge(importTextures);
				byte[] mdlData = BMG3DIO.convertModel(this, res);
				ab.buildings.add(rsc);
				ab.queueModel(rsc, mdlData);
				bmTex.addTextures(importTextures.textures);
				result = rsc;
				dispose();
			} catch (Exception ex) {
				DialogUtils.showExceptionTraceDialog(ex);
			}
		}
    }//GEN-LAST:event_btnDoImportActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner bmImportUID;
    private javax.swing.JLabel bmImportUIDLabel;
    private javax.swing.JButton btnDoImport;
    private javax.swing.JButton btnImportMdl;
    private javax.swing.JSeparator footerSeparator;
    private javax.swing.JSeparator headerSeparator;
    private javax.swing.JLabel headingText;
    private javax.swing.JLabel importAsLabel;
    private javax.swing.JLabel mdlNameLabel;
    private ctrmap.editor.gui.editors.common.components.Custom3DPreview modelPreview;
    private javax.swing.JSeparator previewSeparator;
    private javax.swing.JLabel uidInfoMsg;
    // End of variables declaration//GEN-END:variables
}
