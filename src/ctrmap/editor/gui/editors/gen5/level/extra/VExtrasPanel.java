package ctrmap.editor.gui.editors.gen5.level.extra;

import ctrmap.editor.CTRMap;
import ctrmap.editor.gui.editors.common.AbstractTabbedEditor;
import ctrmap.editor.system.script.gen5.VActionUsageDumper;
import ctrmap.editor.system.script.gen5.VScriptUsageDumper;
import ctrmap.editor.system.script.gen5.VScriptUsageDumperInput;
import ctrmap.editor.system.script.gen5.VWorkUsageDumper;
import ctrmap.formats.pokemon.gen5.zone.VZoneHeader;
import ctrmap.formats.common.GameInfo;
import ctrmap.missioncontrol_ntr.VLaunchpad;
import ctrmap.missioncontrol_ntr.field.VFieldController;
import ctrmap.missioncontrol_ntr.field.script.FieldScriptConfigurator;
import ctrmap.missioncontrol_ntr.fs.NARCRef;
import ctrmap.missioncontrol_ntr.util.ISSDumper;
import ctrmap.pokescript.LangConstants;
import ctrmap.scriptformats.gen5.VScriptFile;
import ctrmap.util.tools.ovl.PMCManager;
import ctrmap.util.tools.swan.SwanComposer;
import java.awt.event.ActionEvent;
import xstandard.fs.FSFile;
import xstandard.gui.file.XFileDialog;
import xstandard.gui.file.CommonExtensionFilters;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import javax.swing.JOptionPane;
import rpm.elfconv.ELF2RPM;
import rpm.elfconv.ExternalSymbolDB;
import rpm.format.rpm.RPM;
import rpm.format.rpm.RPMMetaData;
import rpm.util.AutoRelGenerator;
import xstandard.formats.yaml.Yaml;
import xstandard.gui.DialogUtils;

public class VExtrasPanel extends javax.swing.JPanel implements AbstractTabbedEditor {

	private CTRMap cm;
	private PMCManager pmc;

	public VExtrasPanel(CTRMap cm) {
		initComponents();
		this.cm = cm;
		pmc = new PMCManager(cm.getMissionControl(VLaunchpad.class).fs);
	}

	private VFieldController getField() {
		return getMC().field;
	}

	private VLaunchpad getMC() {
		return cm.getMissionControl(VLaunchpad.class);
	}

	private VScriptUsageDumperInput[] getScriptDumperInputs() {
		VFieldController ctrl = getField();

		List<VScriptUsageDumperInput> inputs = new ArrayList<>();

		HashMap<Integer, FieldScriptConfigurator.ScriptPluginConfig> scriptPlugins = new HashMap<>();

		for (int i = 0; i < ctrl.zoneTable.getZoneCount(); i++) {
			VZoneHeader zh = ctrl.zoneTable.getHeader(i);

			int scrFile = zh.scriptsID;
			FieldScriptConfigurator.ScriptPluginConfig c = ctrl.scrConfigs.getCfgForZone(i);
			if (c != null && scriptPlugins.get(scrFile) == null) {
				scriptPlugins.put(scrFile, c);
			}
		}

		HashSet<Integer> usedScriptFiles = new HashSet<>();

		for (int i = 0; i < ctrl.zoneTable.getZoneCount(); i++) {
			VZoneHeader zh = ctrl.zoneTable.getHeader(i);

			if (!usedScriptFiles.contains(zh.scriptsID)) {
				VScriptUsageDumperInput input = new VScriptUsageDumperInput();
				input.callerName = ctrl.getPlaceName(i) + " (" + i + ")";
				FieldScriptConfigurator.ScriptPluginConfig cfg = scriptPlugins.get(zh.scriptsID);
				input.commandDB = cm.ideHelper.createCombCommandDB(FieldScriptConfigurator.ScriptPluginConfig.getOverlayIDs(cfg));
				input.script = new VScriptFile(ctrl.mc.fs.NARCGet(NARCRef.FIELD_SCRIPTS, zh.scriptsID));
				if (cfg != null) {
					System.out.println("Zone " + i + ": Using script plugin " + cfg.primaryOverlay + "/" + cfg.secondaryOverlay + " for script " + input.script.getSourceFile() + " cdbmax " + Integer.toHexString(input.commandDB.getCommandMax()));
				} else {
					System.out.println("Zone " + i + ": Using vanilla instruction set for script " + input.script.getSourceFile());
				}
				inputs.add(input);
				usedScriptFiles.add(zh.scriptsID);
			}
		}

		int scrMax = ctrl.mc.fs.NARCGetDataMax(NARCRef.FIELD_SCRIPTS);

		for (int i = ctrl.zoneTable.getZoneCount() * 2; i < scrMax; i++) {
			if (!usedScriptFiles.contains(i)) {
				FSFile f = ctrl.mc.fs.NARCGet(NARCRef.FIELD_SCRIPTS, i);
				if (VScriptFile.isScriptFile(f)) {
					VScriptUsageDumperInput in = new VScriptUsageDumperInput();
					in.callerName = "Global script " + i;
					in.commandDB = cm.ideHelper.createCombCommandDB(null);
					in.script = new VScriptFile(f);
					inputs.add(in);
					usedScriptFiles.add(i);
				}
			}
		}

		return inputs.toArray(new VScriptUsageDumperInput[inputs.size()]);
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this
	 * code. The content of this method is always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dumpUtilLabel = new javax.swing.JLabel();
        btnDumpISS = new javax.swing.JButton();
        btnDumpAllScr = new javax.swing.JButton();
        btnDumpAllAcmd = new javax.swing.JButton();
        btnDumpAllWk = new javax.swing.JButton();
        sndDumpLabel = new javax.swing.JLabel();
        scrDumpLabel = new javax.swing.JLabel();
        codeInjectionLabel = new javax.swing.JLabel();
        btnUpdatePMC = new javax.swing.JButton();
        btnElf2Dll = new javax.swing.JButton();
        btnSwanComposer = new javax.swing.JButton();
        btnAutoInstallConvElf = new javax.swing.JCheckBox();
        btnLibRPMUpgrade = new javax.swing.JButton();
        btnUpgradePatches = new javax.swing.JCheckBox();
        btnUpgradeLibraries = new javax.swing.JCheckBox();

        dumpUtilLabel.setText("Dump utility");

        btnDumpISS.setText("Dump ISS data");
        btnDumpISS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDumpISSActionPerformed(evt);
            }
        });

        btnDumpAllScr.setText("Dump all instruction usages");
        btnDumpAllScr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDumpAllScrActionPerformed(evt);
            }
        });

        btnDumpAllAcmd.setText("Dump all action usages");
        btnDumpAllAcmd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDumpAllAcmdActionPerformed(evt);
            }
        });

        btnDumpAllWk.setText("Dump all work usages");
        btnDumpAllWk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDumpAllWkActionPerformed(evt);
            }
        });

        sndDumpLabel.setText("Sound");

        scrDumpLabel.setText("Scripts");

        codeInjectionLabel.setText("Code injection");

        btnUpdatePMC.setText("Install/Update PMC");
        btnUpdatePMC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdatePMCActionPerformed(evt);
            }
        });

        btnElf2Dll.setText("Convert ELF to DLL");
        btnElf2Dll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnElf2DllActionPerformed(evt);
            }
        });

        btnSwanComposer.setText("SwanComposer");
        btnSwanComposer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSwanComposerActionPerformed(evt);
            }
        });

        btnAutoInstallConvElf.setSelected(true);
        btnAutoInstallConvElf.setText("Install to /patches");

        btnLibRPMUpgrade.setText("Upgrade libRPM");
        btnLibRPMUpgrade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLibRPMUpgradeActionPerformed(evt);
            }
        });

        btnUpgradePatches.setSelected(true);
        btnUpgradePatches.setText("/patches");

        btnUpgradeLibraries.setSelected(true);
        btnUpgradeLibraries.setText("/lib");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dumpUtilLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sndDumpLabel)
                            .addComponent(scrDumpLabel)
                            .addComponent(codeInjectionLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnDumpISS)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnDumpAllScr)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnDumpAllAcmd)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnDumpAllWk))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(btnLibRPMUpgrade, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(btnSwanComposer, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(btnUpdatePMC, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(btnElf2Dll)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(btnAutoInstallConvElf))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(btnUpgradePatches)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(btnUpgradeLibraries)))))))))
                .addContainerGap(82, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(dumpUtilLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sndDumpLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDumpISS)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrDumpLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDumpAllScr)
                    .addComponent(btnDumpAllAcmd)
                    .addComponent(btnDumpAllWk))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(codeInjectionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdatePMC)
                    .addComponent(btnElf2Dll)
                    .addComponent(btnAutoInstallConvElf))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLibRPMUpgrade)
                    .addComponent(btnUpgradePatches)
                    .addComponent(btnUpgradeLibraries))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSwanComposer)
                .addContainerGap(65, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnDumpAllScrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDumpAllScrActionPerformed
		if (getField() != null) {
			FSFile dir = XFileDialog.openDirectoryDialog("Select directory for dumped files");

			if (dir != null) {
				VScriptUsageDumper.dumpFile(dir, getScriptDumperInputs());
			}
		}
    }//GEN-LAST:event_btnDumpAllScrActionPerformed

    private void btnDumpAllAcmdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDumpAllAcmdActionPerformed
		if (getField() != null) {
			FSFile dest = XFileDialog.openSaveFileDialog("Select the file for the generated header", (String) null, LangConstants.LANG_HEADER_EXTENSION_FILTER);

			if (dest != null) {
				VActionUsageDumper.dumpFile(dest, getScriptDumperInputs());
			}
		}
    }//GEN-LAST:event_btnDumpAllAcmdActionPerformed

    private void btnDumpAllWkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDumpAllWkActionPerformed
		if (getField() != null) {
			FSFile dest = XFileDialog.openSaveFileDialog(CommonExtensionFilters.PLAIN_TEXT);

			if (dest != null) {
				VWorkUsageDumper.dumpFile(dest, getScriptDumperInputs());
			}
		}
    }//GEN-LAST:event_btnDumpAllWkActionPerformed

    private void btnDumpISSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDumpISSActionPerformed
		if (getMC() != null) {
			FSFile dest = XFileDialog.openDirectoryDialog("Select a directory for the dumped files");

			if (dest != null) {
				ISSDumper.dump(getMC().fs, dest);
			}
		}
    }//GEN-LAST:event_btnDumpISSActionPerformed

    private void btnUpdatePMCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdatePMCActionPerformed
		if (!cm.getGame().isBW2()) {
			DialogUtils.showErrorMessage(cm, "Not supported", "Code injection is only supported on Pokémon Black 2/White 2");
		} else {
			FSFile file = XFileDialog.openFileDialog("Select the PMC static module RPM", RPM.EXTENSION_FILTER);
			if (file != null && RPM.isRPM(file)) {
				try {
					pmc.updatePMC(new RPM(file));
					cm.getProject().wsfs.getOvFSFile("data/patches").mkdirs();
				} catch (Exception ex) {
					DialogUtils.showExceptionTraceDialog(ex);
				}
			}
		}
    }//GEN-LAST:event_btnUpdatePMCActionPerformed

	private ExternalSymbolDB elf2DllEsdb;

	private static enum PMCModulePriority {
		SYSTEM_CRUCIAL,
		COMMON_DEPENDENCY_1,
		COMMON_DEPENDENCY_2,
		COMMON_DEPENDENCY_3,
		PATCH
	}

    private void btnElf2DllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnElf2DllActionPerformed
		if (elf2DllEsdb == null || ((evt.getModifiers() & ActionEvent.SHIFT_MASK) != 0)) {
			FSFile esdbFile = XFileDialog.openFileDialog("First, open a symbol database file", Yaml.EXTENSION_FILTER);
			if (esdbFile != null) {
				elf2DllEsdb = new ExternalSymbolDB(esdbFile);
			}
		}
		if (elf2DllEsdb != null) {
			FSFile elf = XFileDialog.openFileDialog("Select a relocatable ARM ELF", CommonExtensionFilters.ELF);
			if (elf != null) {
				FSFile dst = XFileDialog.openSaveFileDialog(null, elf.getNameWithoutExtension(), CommonExtensionFilters.DLL);
				if (dst != null) {
					RPM rpm = ELF2RPM.getRPM(elf, elf2DllEsdb);
					AutoRelGenerator.makeHooksAuto(rpm, elf2DllEsdb);
					rpm.strip();
					PMCModulePriority type = PMCModulePriority.PATCH;
					if ((evt.getModifiers() & ActionEvent.ALT_MASK) != 0) {
						PMCModulePriority type2 = (PMCModulePriority) JOptionPane.showInputDialog(this, "What priority should this module be handled with?", "Module priority", JOptionPane.QUESTION_MESSAGE, null, PMCModulePriority.values(), PMCModulePriority.PATCH);
						if (type2 != null) {
							type = type2;
						}
					}
					rpm.metaData.putValue(new RPMMetaData.RPMMetaValue("PMCModulePriority", type));
					dst.setBytes(rpm.getBytes("DLXF"));
					if (btnAutoInstallConvElf.isSelected()) {
						dst.copyTo(cm.getProject().wsfs.getFsFile("data/patches/" + dst.getName()));
					}
				}
			}
		}
    }//GEN-LAST:event_btnElf2DllActionPerformed

    private void btnSwanComposerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSwanComposerActionPerformed
		new SwanComposer().setVisible(true);
    }//GEN-LAST:event_btnSwanComposerActionPerformed

	private static void upgradeRPMExecDir(FSFile dir) {
		if (!dir.exists()) {
			return;
		}
		for (FSFile file : dir.listFiles()) {
			if (file.isDirectory()) {
				upgradeRPMExecDir(file);
			} else if (RPM.isRPM(file, "DLXF")) {
				file.setBytes(new RPM(file, "DLXF").getBytes("DLXF"));
			}
		}
	}

    private void btnLibRPMUpgradeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLibRPMUpgradeActionPerformed
		try {
			if (btnUpgradePatches.isSelected()) {
				FSFile patches = cm.getProject().wsfs.getFsFile("data/patches");
				upgradeRPMExecDir(patches);
			}
			if (btnUpgradeLibraries.isSelected()) {
				FSFile lib = cm.getProject().wsfs.getFsFile("data/lib");
				upgradeRPMExecDir(lib);
			}
		}
		catch (Exception ex) {
			DialogUtils.showExceptionTraceDialog(ex);
		}
    }//GEN-LAST:event_btnLibRPMUpgradeActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox btnAutoInstallConvElf;
    private javax.swing.JButton btnDumpAllAcmd;
    private javax.swing.JButton btnDumpAllScr;
    private javax.swing.JButton btnDumpAllWk;
    private javax.swing.JButton btnDumpISS;
    private javax.swing.JButton btnElf2Dll;
    private javax.swing.JButton btnLibRPMUpgrade;
    private javax.swing.JButton btnSwanComposer;
    private javax.swing.JButton btnUpdatePMC;
    private javax.swing.JCheckBox btnUpgradeLibraries;
    private javax.swing.JCheckBox btnUpgradePatches;
    private javax.swing.JLabel codeInjectionLabel;
    private javax.swing.JLabel dumpUtilLabel;
    private javax.swing.JLabel scrDumpLabel;
    private javax.swing.JLabel sndDumpLabel;
    // End of variables declaration//GEN-END:variables

	@Override
	public String getTabName() {
		return "Extras";
	}

	@Override
	public boolean isGameSupported(GameInfo game) {
		return game.isGenV();
	}
}
