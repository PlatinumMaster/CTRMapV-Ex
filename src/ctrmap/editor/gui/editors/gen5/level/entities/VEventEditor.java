package ctrmap.editor.gui.editors.gen5.level.entities;

import ctrmap.editor.CTRMap;
import ctrmap.editor.gui.editors.common.AbstractTabbedEditor;
import ctrmap.editor.gui.editors.text.alias.ITextAliasManager;
import ctrmap.editor.gui.editors.gen5.text.VTextLoader;
import ctrmap.editor.system.script.CTRMapIDEHelper;
import ctrmap.pokescript.ide.PSIDE;
import ctrmap.pokescript.ide.system.project.IDEFile;
import ctrmap.pokescript.ide.system.project.IDEProject;
import ctrmap.pokescript.stage0.Preprocessor;
import ctrmap.pokescript.stage1.NCompileGraph;
import xstandard.fs.FSUtil;
import ctrmap.formats.common.GameInfoListener;
import ctrmap.pokescript.ide.FileEditorRSTA;
import xstandard.gui.file.XFileDialog;
import java.util.List;
import ctrmap.missioncontrol_ntr.field.VFieldController;
import ctrmap.missioncontrol_ntr.field.debug.VZoneDebugger;
import ctrmap.editor.system.script.MessageIDManager;
import ctrmap.editor.system.workspace.CTRMapProject;
import ctrmap.editor.system.workspace.UserData;
import ctrmap.formats.pokemon.gen5.zone.entities.VZoneEntities;
import ctrmap.missioncontrol_ntr.field.debug.VFieldDebugger;
import ctrmap.missioncontrol_ntr.field.script.FieldScriptConfigurator;
import ctrmap.missioncontrol_ntr.field.structs.VZone;
import ctrmap.pokescript.ide.system.IDEResourceReference;
import ctrmap.pokescript.ide.system.ResourcePathType;
import ctrmap.pokescript.ide.system.project.IDEProjectListener;
import ctrmap.pokescript.ide.system.project.include.Dependency;
import ctrmap.pokescript.ide.system.project.include.DependencyType;
import ctrmap.pokescript.stage2.VExecMaker;
import ctrmap.scriptformats.gen5.VScriptFile;
import ctrmap.util.gui.CMGUI;
import java.util.concurrent.atomic.AtomicBoolean;
import xstandard.fs.FSFile;

public class VEventEditor extends javax.swing.JPanel implements AbstractTabbedEditor, VFieldDebugger, VZoneDebugger {

	private CTRMap cm;

	private VZone zone;

	private VFieldController ctrl;

	private MessageIDManager msgIdMgr;

	public VEventEditor(CTRMap cm) {
		initComponents();
		textEditor.load(cm);
		this.cm = cm;
	}

	@Override
	public void onProjectLoaded(CTRMapProject cmproj) {
		if (cmproj == null) {
			textEditor.setMsgIdManager(msgIdMgr = null);
		} else {
			textEditor.initialize(new VTextLoader(cm));
			textEditor.setMsgIdManager(msgIdMgr = new MessageIDManager(cmproj));
		}
	}
	
	@Override
	public void onProjectUnloaded(CTRMapProject cmproj) {
		onProjectLoaded(null);
	}

	@Override
	public void attachField(VFieldController ctrl) {
		this.ctrl = ctrl;
	}

	@Override
	public void loadZone(VZone z) {
		zone = z;
		if (z != null) {
			textEditor.forceMsgFileLoad(VTextLoader.ArcType.SCRIPT_MSG, z.header.textFileID);
		} else {
			textEditor.forceMsgFileLoad(VTextLoader.ArcType.SYSTEM_MSG, 0);
		}
	}
	
	@Override
	public boolean store(boolean dialog) {
		if (zone != null) {
			final AtomicBoolean forceWriteZoneEntities = new AtomicBoolean(false);
			if (zone.initScrUnused != null) {
				if (!CMGUI.commonSaveDataSequence(cm, zone.initScrUnused.hash, dialog, "Initialization scripts", true, (() -> {
					zone.initScrUnused.writeToSourceFile();
					if (zone.entities != null) {
						zone.entities.initScr.setFrom(zone.initScrUnused);
						forceWriteZoneEntities.set(true);
					}
				}))) {
					return false;
				}
			}

			VZoneEntities e = zone.entities;
			if (e != null) {
				if (!CMGUI.commonSaveDataSequence(cm, e.monitor, dialog, "Zone entities", true, (() -> {
					e.write();
					forceWriteZoneEntities.set(false); //written anyway
				}))) {
					return false;
				}
				if (forceWriteZoneEntities.get()) {
					e.write();
				}
			}
		}
		return textEditor.store(dialog);
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this
	 * code. The content of this method is always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textEditor.setBorder(javax.swing.BorderFactory.createTitledBorder("Texts"));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(textEditor, javax.swing.GroupLayout.DEFAULT_SIZE, 849, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(textEditor, javax.swing.GroupLayout.DEFAULT_SIZE, 502, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

	private class ZoneScriptsIDEProjectListener implements IDEProjectListener {

		private VScriptFile file;

		public ZoneScriptsIDEProjectListener(VScriptFile scriptFile) {
			this.file = scriptFile;
		}

		@Override
		public void onMainClassChanged(IDEFile newMainClass) {
			System.out.println("Project main class changed to " + newMainClass);
			changeWorkMainClass(newMainClass);
//			onSaved(FileEditorRSTA.SaveResult.SAVED);
		}

		@Override
		public void onSaved(FileEditorRSTA.SaveResult result) {
//                    if (result != FileEditorRSTA.SaveResult.CANCELLED && lastMainClass != null) {
//                            IDEFile f = lastMainClass;
//                            Preprocessor pp = f.getCompiler();
//                            if (pp.isCompileSuccessful()) {
//                                    NCompileGraph cg = f.getCompiler().getCompileGraph();
//                                    if (cg != null) {
//                                            VExecMaker.compileVScript(cg, file);
//                                            file.write();
//                                    }
//                            }
//                    }
		}
	}

	private IDEFile lastMainClass = null;

	private void changeWorkMainClass(IDEFile mainClass) {
		lastMainClass = mainClass;
	}

	private IDEProject lastProject = null;
	private ZoneScriptsIDEProjectListener projectListener;

	private void changeWorkProject(IDEProject project) {
		if (project != lastProject) {
			if (lastProject != null) {
				lastProject.removeListener(projectListener);
			}
			lastProject = project;
			project.addListener(projectListener = new ZoneScriptsIDEProjectListener(zone.scripts));
		}
	}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public final ctrmap.editor.gui.editors.text.TextEditor textEditor = new ctrmap.editor.gui.editors.text.TextEditor();
    // End of variables declaration//GEN-END:variables

	@Override
	public String getTabName() {
		return "Text Editor";
	}

	@Override
	public List<GameInfoListener> getGameInfoListeners() {
		return textEditor.getGameInfoListeners();
	}
}
